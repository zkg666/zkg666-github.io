<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2019/08/18/WebApi%E6%80%BB%E7%BB%93/"/>
    <url>2019/08/18/WebApi%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="WebApi阶段"><a href="#WebApi阶段" class="headerlink" title="WebApi阶段"></a>WebApi阶段</h1><h2 id="Api"><a href="#Api" class="headerlink" title="Api"></a>Api</h2><pre><code>1.是一个接口（别人已经写好的用来实现功能的方法和函数）2.怎样学？记方法；</code></pre><h2 id="JS的组成部分"><a href="#JS的组成部分" class="headerlink" title="JS的组成部分"></a>JS的组成部分</h2><pre><code>一.ECMASCRIPT： 标准语法************************************************************************************************二.DOM       Document Object Model(文档对象类型)      1.文档类型的作用？          通过JS操作网页      2.什么是文档对象类型          JS将整个网页封装成了一个对象（Document）      3.文档树      在文档树中每一个标签都是一个对象************************************************************************************************三.BOM        Browser Object Modex（浏览器对象模型）      BOM将整个浏览器包装成一个对象   window      window对象里包括了文档对象（Document）</code></pre><h2 id="JS获取页内元素"><a href="#JS获取页内元素" class="headerlink" title="JS获取页内元素"></a>JS获取页内元素</h2><pre><code>1.document.getElementsByTagName(&#39;标签名&#39;);获取的是多个标签（元素）, 通过该方法返回的是一个伪数组，该返回中放的就是获取到的标签对象想要获得其中的每个值，需要进行遍历************************************************************************************************2.document.getElementById(&#39;id名&#39;);获得的是一个值，返回的是一个值，一个结果************************************************************************************************3.document.querySelector(&#39;css选择器&#39;);css选择器是之前写的选择器，返回的是满足条件的第一个结果************************************************************************************************4.document.querySelectorAll(&#39;css选择器&#39;);css选择器是之前写的选择器，返回的是一个伪数组，想要获得其中的每个值，需要进行遍历注意：获取的页内元素需要定义一个变量去接受；</code></pre><h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><pre><code>1.事件： 就是用的一个具体动作事件由3部分组成：事件源：要给哪个标签注册（绑定）事件，就是事件源事件类型：值得就是不同的动作，单击onclick 双击ondblclick处理函数：就是一个实现功能的匿名函数注意：在事件中的this指向的就是事件源对象*****************************************************************************************</code></pre><h2 id="操作元素属性"><a href="#操作元素属性" class="headerlink" title="操作元素属性"></a>操作元素属性</h2><pre><code>1.console.dir(对象名);可以得到对象的所有属性************************************************************************************************2.一般：获取数据的值就是：对象名.属性名        赋值就是：对象名.属性名=值;************************************************************************************************3.innerText和innerHTML获取：      通过对象.innerText获取标签中的内容      通过对象.innerHTML获取标签中的内容      区别：      innerText：      只能获取文本信息      innerHTML      *可以获取文本信息      *可以获取标签      *还可以获取特殊符号（回车换行等）赋值：通过对象.innerText=值;如果设置html标签将以文本的形式展示通过对象.innerHTML=值;可以设置html标签************************************************************************************************4.src属性获取对象src对象名.src;赋值对象名.src = 值;5.className用js的方式给标签设置类名步骤：首先要写好类样式     然后对象名.className=&#39;类名&#39;;可以添加多个类名对象名.className=&#39;类名1 类名2&#39;;</code></pre><h2 id="阻止a标签跳转"><a href="#阻止a标签跳转" class="headerlink" title="阻止a标签跳转"></a>阻止a标签跳转</h2><pre><code>在事件中设置：return flase;</code></pre><h2 id="样式操作"><a href="#样式操作" class="headerlink" title="样式操作"></a>样式操作</h2><pre><code>1.通过className的方式对象名.className=&#39;类名 类名&#39;;     进行添加类名对象名.className=&#39;&#39;;进行移除类名2.通过style的方式对象名.style.属性=&#39;值&#39;;  如果需要添加的样式少可以用这种方法，样式多的用添加类名的方式好3.通过classList的方式    对象名.classList.add(&#39;类名&#39;);   添加类名    如果要添加多个类名中间以逗号间隔        对象名.classList.add(&#39;类名&#39;,&#39;类名&#39;);    对象名.classList.remove(&#39;类名&#39;);   移除类名    如果要移除多个类名中间以逗号间隔        对象名.classList.remove(&#39;类名&#39;,&#39;类名&#39;);    对象名.classList.contains(&#39;类名&#39;);   判断是否有类名    对象名.classList.toggle(&#39;类名&#39;);    切换类名，如果没有类名就添加，如果有就移除</code></pre><h2 id="操作表单属性"><a href="#操作表单属性" class="headerlink" title="操作表单属性"></a>操作表单属性</h2><pre><code>1.value 属性获取表单中的值：对象名.value;给表单赋值：对象名.value = &#39;值&#39;;2.disabled和readOnly 用法相同，一个是禁用，一个是只读获取当前控件是否被禁用对象名.disabled                  返回的是true则是被禁用，返回false是未被禁用设置当前控件被禁用对象名.disabled= true|false     true是被禁用，false是不被禁用3.checked 选中获取标签是否被选中对象名.checked                  返回的是true则是被选中，返回false是未被选中设置当前控件被禁用对象名.checked= true|false      true是被选中，false是不被选中4.selected 下拉菜单选中获取下拉列表是否被选中对象名.selected                    返回的是true则是被选中，返回false是未被选中设置控件是否被选中对象名.selected=true | false     true是被选中，false是不被选中备注：      1. 下拉列表默认是从第一项开始显示的，默认第一项是被选中的状态注意：单个属性的返回结果是布尔类型，设置时只需设置true或者是false即可只有控件有的属性才能设置，没有的不能设置</code></pre><h2 id="获得焦点和失去焦点"><a href="#获得焦点和失去焦点" class="headerlink" title="获得焦点和失去焦点"></a>获得焦点和失去焦点</h2><pre><code>两个事件，获得焦点和失去焦点1.获得焦点对象名.focus2.失去焦点对象名.onblur</code></pre><h2 id="鼠标事件"><a href="#鼠标事件" class="headerlink" title="鼠标事件"></a>鼠标事件</h2><pre><code>onmouseenter和onmouseleave    鼠标进入和离开事件（推荐用这个）onmouseover和onmouseout        鼠标在元素之上和鼠标移除onmousemove ：                 鼠标移动时候的一个事件，鼠标移动事件onmousedown和onmouseup         鼠标按下和鼠标抬起事件</code></pre><h2 id="隐藏和显示"><a href="#隐藏和显示" class="headerlink" title="隐藏和显示"></a>隐藏和显示</h2><pre><code>对象名.style.display=&#39;none&#39;;隐藏对象名.style.display=&#39;block&#39;;显示</code></pre><h2 id="操纵标签属性样式"><a href="#操纵标签属性样式" class="headerlink" title="操纵标签属性样式"></a>操纵标签属性样式</h2><pre><code>1.操纵系统属性获取属性dom.getAttribute(&#39;属性&#39;);设置属性dom.setAttribute(&#39;属性名&#39;,&#39;值&#39;);移除属性dom.removeAttribute(&#39;属性名&#39;)这几种方法既可以操纵系统属性，还可以操纵自定义的属性2.操纵自定义属性自定义属性：自己定义的属性，在标签中以date-开头获取属性    1.通过dom.getAttribute(&#39;属性&#39;)    2.通过H5带的方法    dom.dateset.(&#39;属性&#39;);     是date-后面的内容    只能获取自定义属性的值，返回的是一个伪数组设置属性    1.通过dom.setAttribute(&#39;属性名&#39;,&#39;值&#39;)的方式    2.dom.dateset;    var a = div.dateset;    a.czbk = &#39;chuanzhi&#39;;</code></pre><h2 id="通过节点控制页面元素"><a href="#通过节点控制页面元素" class="headerlink" title="通过节点控制页面元素"></a>通过节点控制页面元素</h2><pre><code>1.节点：所有的标签，属性，文本，回车符，换行符等2.元素：页面中的标签3.判断父元素是否存在子元素或者是子节点dom.hasChildNodes()返回一个布尔类型，true代表存在，flase代表不存在4.获取父元素中的子元素dom.children返回的是一个伪数组，可以根据length属性判断是否存在子元素，可以根据循环遍历得到里面的值5.根据父元素获取子元素或子节点    获取所有子元素: dom.children    获取第一个子元素：dom.firstElementChild    获取第二个子元素：dom.lastElementChild    其他：         获取父元素中的子节点：       dom.childNodes         获取父元素中第一个子节点:    dom.firstChild         获取父元素中最后一个子节点：  dom.lastChild6.根据子节点获取父节点dom.parentNode    ---&gt; 获取当前标签的父节点,返回的是一个节点对象7.获取兄弟节点  获取当前元素上一个兄弟元素(标签)： dom.previousElementSibling  获取当前元素的下一个兄弟元素（标签）: dom.nextElementSibling  获取兄弟节点:       dom.nextSibling      下一个兄弟节点       dom.previousSibling  上一个兄弟节点8.节点类型和节点名称     获取节点的类型     dom.nodeType  ---&gt; 1 代表元素     3  代表节点   2 代表属性      获取节点的名字     dom.nodeName  ---&gt; 获取当前节点的名字     如果节点是一个文本（回车），那么通过dom.nodeName --- 得到的结果是 #text</code></pre><h2 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h2><pre><code>1.document.write();2.dom.innerHTML=&#39;&#39;;3.dom.createElement(&#39;标签名&#39;);    删除操作：1.将此标签进行隐藏 this.parentNode.parentNode.style.display=&#39;none&#39;;             2.父元素.removeChild(node);通过第三种创建的方式返回的是一个对象，要定义一个变量去接收步骤：  ✔   通过 document.createElement(&#39;标签名称&#39;)创建一个标签,返回的就是一个节点对象  ✔   通过一个变量来接收创建好的标签（对象）  ✔   需要将创建好的标签添加到对应的文档树中（一个具体的节点中） 通过 dom.appendChild(节点);</code></pre><h2 id="动态创建元素的其他方式"><a href="#动态创建元素的其他方式" class="headerlink" title="动态创建元素的其他方式"></a>动态创建元素的其他方式</h2><pre><code>1.dom.appendChild(节点);在父元素的末尾创建一个子节点；2.dom.insertBefore(新节点,目标节点);在目标节点之前创建一个子节点    例如：dom.insertBefore(新节点，dom.firstElementChild);        这就是每次都在第一个位置显示元素3.dom.cloneNode()克隆节点，参数是一个布尔类型的值     true:  将标签中的其他内容可以克隆     false: 只克隆当前标签，不会克隆标签中的其他内容。4.dom.replaceChild(新节点, 目标节点)替换。</code></pre><h2 id="输入框事件"><a href="#输入框事件" class="headerlink" title="输入框事件"></a>输入框事件</h2><pre><code>输入框事件： 用来检测用户输入dom.oninput</code></pre><h2 id="给元素注册事件"><a href="#给元素注册事件" class="headerlink" title="给元素注册事件"></a>给元素注册事件</h2><pre><code>tip:通过on的方式注册的同一个事件，下面的会覆盖前面的，所以想要不覆盖之前的，要用到新的方式。1.通过事件监听的方式事件源.addEventListener(参数1,参数2,参数3);参数1：事件类型，不能用on,带引号，字符串类型的参数2：处理函数（匿名或者是命名）function(){}注意：兼容性，ie8级以下不能用2.dom.attachEvent(参数1,参数2)参数1：事件类型，需要on,带引号，字符串类型的参数2：处理函数（匿名或者是命名）function(){}注意：这种方式是给ie低版本浏览器使用的3.兼容性，兼容ie低版本和谷歌&lt;!--[if IE 8]&gt;    &lt;script&gt; dom.attachEvent(参数1,参数2)代码&lt;/script&gt;&lt;![endif]--&gt;4.移除元素：    1.如果是通过on给元素注册事件，要移除只需赋值null    例如：dom.onclick=null;    2.如果是通过事件源.addEventListener(参数1,参数2,参数3);这种方式    注意：参数2的函数必须是命名函数    例如：    例如：                         btn.addEventListener(&#39;click&#39;, fn);              function fn() {                  alert(1);              }              //移除对应的该事件              btn.removeEventListener(&#39;click&#39;,fn);    3.dom.attachEvent(参数1,参数2)这种方式detachEvent();    注意：参数2的函数也必须是命名函数，使用方式与 removeEventListener 一样。</code></pre><h2 id="事件的3个阶段"><a href="#事件的3个阶段" class="headerlink" title="事件的3个阶段"></a>事件的3个阶段</h2><pre><code>      1. addEventListener 中第三个参数是一个布尔类型的结果        1.1 :  如果 addEventListener 第三个参数是false（默认值），那么就会出现事件冒泡的现象        1.2  ：如果 addEventListener 第三个参数是true，那么会出现事件捕获的现象    2. 事件冒泡： 事件会从当前事件源处开始向外传递    3. 事件捕获： 事件会从外向内传递，传递到点击当前的事件源为止    4. 事件执行： 事件到事件源处执行完了（点击的当前真正事件源）    注意：         ✔ 通过 onclick的方式只能出现 事件冒泡，没有调用执行捕获阶段 （不支持第三个参数的设置）         ✔ 通过 attachEvent的方式注册事件 出现事件冒泡，没有调用执行捕获阶段（不支持第三个参数的设置）   </code></pre><h2 id="委托（编程思想）"><a href="#委托（编程思想）" class="headerlink" title="委托（编程思想）"></a>委托（编程思想）</h2><pre><code>事件对象参数：          当用户在执行一个事件的事件的，该参数中会将用户执行事件的一些数据记录下来    注意：         1. 事件对象参数不需要我们赋值         2. 在执行事件的时候，事件对象参数中就有值了。    总结：         e.target  ---&gt; 获取当前真正的对象         e.type    ----&gt; 获取当前事件类型</code></pre><h2 id="通过事件对象参数获取鼠标位置信息"><a href="#通过事件对象参数获取鼠标位置信息" class="headerlink" title="通过事件对象参数获取鼠标位置信息"></a>通过事件对象参数获取鼠标位置信息</h2><pre><code>     e.clientX : 从浏览器的左上角开始计算横坐标     e.clientY     e.offsetX: 从当前点击元素的左上角计算横坐标     e.offsetY：     e.pageX: 从浏览器的左上角开始计算横坐标     e.pageY：     e.screenX: 从整个电脑屏开始计算     e.screenY：从整个电脑屏开始计算</code></pre><h2 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h2><pre><code>    onkeydown : 按下键盘上任何一个键    onkeyup ： 当键盘上的键抬起的时候触发的事件    onkeypress:  无法获取键盘上的功能键    注意：         1. 获取用户按下键的名字   e.key         2. 获取键盘上每一个键对应的值:  e.keyCode</code></pre><h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><pre><code>1.BOM 浏览器对象模型在浏览器中有个顶级对象window注意：在js的全局作用域中的所有变量，函数，在访问window这个顶级对象时可以省略不写2.页面加载事件window.onload()=function(){}当页面加载完成后(文档渲染完成，外部css加载完，外部js加载完)再执行onload里面的事件3.location对象    1.通过js进行页面跳转(重点)    location.href=&#39;地址&#39;;  页面跳转，在当面页面跳转    location.href          获取当前页面地址    window.open                打开页面，在新窗口中    2.其他方法(了解)    assign() 委派，和href用法相同    replace()替换，跳转页面，没有历史记录，无法后退    reload()重新加载，相当于刷新3.location属性介绍    location.host       ---&gt; 主机名(域名)    location.pathname   ---&gt; 文件路径    location.protocol   ---&gt; 协议    location.port       ----&gt; 端口</code></pre><h2 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h2><pre><code>1.setTimeout(参数1, 参数2):  在几毫秒之后要执行某个处理程序  （类似于延时效果）        参数1: 代表的是一个处理程序（匿名函数或者命名函数）        参数2: 代表的就是一个时间（以毫秒为单位）通过 clearTimeout(参数id) 可以将 对应的 setTimeout定时器停止掉（清掉）          参数id : 代表的就是  setTimeout开启时候的一个id值       注意：           代码每执行一次 setTimeout() 就会开启一个新的定时器，每一个定时器都会有一个自己的编号。2.setInterval(参数1, 参数2):  每隔一段时间就执行一次。（闹钟）           参数1：代表处理程序（要做的事情）           参数2：代表间隔的时间（以毫秒为单位）清除 setInterval定时器：  通过  clearInterval(id)       注意：           代码每执行一次  setInterval() 就会开启一个新的定时器,每一个定时器都会有一个自己的编号.</code></pre><h2 id="获取元素的大小和位置"><a href="#获取元素的大小和位置" class="headerlink" title="获取元素的大小和位置"></a>获取元素的大小和位置</h2><pre><code>一、offset    offsetLeft        元素在水平方向的偏移量    offsetTop         元素在垂直方面的偏移量    offsetHeight    元素的实际高度    offsetWidth        元素的实际宽度二、client    clientLeft        元素的左边框的宽度    clientTop        元素的上边框宽度    clientWidth        元素的宽度，不包括边框，包括padding    clientHeight    元素的高度，不包括边框，包括padding三、scroll    scrollLeft            scrollTop        元素的滚动条滚动的距离    scrollWidth            1. 如果内容区域小于当前元素，那么scrollWidth就代表当前元素大小【算内边距，不算边框】    2. 如果内容区域大于当前元素，那么scrollWidth就等于内容区域大小 + 左内边距    scrollHeight    </code></pre><h2 id="移动端事件"><a href="#移动端事件" class="headerlink" title="移动端事件"></a>移动端事件</h2><pre><code>1.移动端基础事件类型(只能通过事件监听的方式加基础)touchstart        手指按下touchend        手指离开touchmove        手指滑动e.touches        获取手指在屏幕的信息         返回的是一个伪数组     数组里面的内容是对象e.targetTouches    获取手指在元素上的信息        返回的是一个伪数组    数组里面的内容是对象e.changedTouches获取手指离开屏幕的信息        返回的是一个伪数组    数组里面的内容是对象总结：    1.将手机屏幕的手指信息以伪数组的形式保存    2.该数组中的每一个值都是以对象的形式保存的    3.length获得手指的个数    4.clientX获得手指距视口的水平距离    5.clientY获得手指距视口的垂直距离    6.pageX获得手指距视口的垂直距离，如果出现滚动条则包括滚动条的距离2.用基础事件封装一个点击事件和滑动事件思路：手指按下的位置和离开的位置相同    滑动事件思路：          1.按下时候的位置 和 离开时候的位置是否一样        2.如果是水平滑动：              水平的距离 &gt; 垂直距离              从左向右滑动：     开始位置 &lt; 结束位置              从右向左滑动：     开始位置 &gt; 结束位置        3. 如果是垂直滑动               垂直距离 &gt; 水平距离               从上向下滑动：   开始位置 &lt; 结束位置               从下向上滑动：   开始位置 &gt; 结束位置3.在移动端的轮播图可以用插件完成https://www.swiper.com.cn/    1. 下载文件    2. 引用文件</code></pre><h2 id="拓展H5中API"><a href="#拓展H5中API" class="headerlink" title="拓展H5中API"></a>拓展H5中API</h2><pre><code>1.文件读取    上传功能： 文件读取    步骤：          1. 准备一个上传控件  (&lt;input type=&quot;file&quot;&gt;)        2. 给当前控件注册一个change事件        3. 在change事件中获取上传的资源信息        4. 用户上传的资源都在 files【伪数组，每一个资源都是以对象的形式保存】        5. 要读取文件的时候，需要创建一个读取器            例如： var reader = new FileReader();            事件： onload （当资源完全读取完成后就会触发的一个事件）            属性： result （获取最后的读取结果）            方法： readAsText()  :    以文本的形式读取文件（获取文件中的文字信息）                  readAsDataURL() :   将文件的路径读取处理        6. 注意： 不能直接获取读取结果，当前资源被读取完成后才能获取读取结果  2.本地存储☞ sessionStorage         保存数据         sessionStorage.setItem(键, 值);         获取数据         sessionStorage.getItem(键);         删除数据         sessionStorage.removeItem(键);         清空所有的数据         sessionStorage.clear();         总结：             1. 保存的数据是临时数据（页面关闭后，所有的数据都被自动清空）             2. sessionStorage保存的值只能在当前页面中访问             3. 保存数据的大小大约在 5M    ☞ localStorage        localStorage.setItem(键, 值);        localStorage.getItem(键);        localStorage.removeItem(键);        localStorage.clear();         总结：             1. 保存的数据是持久化的数据（页面关闭后，数据依然存在）；             2. localStorage 保存的数据可以在其他页面中访问             3. localStorage保存数据的大小大约在 20M3.多媒体API    ☞方法：          play() 播放         pause() 暂停    ☞ 属性：         paused         是否暂停  （true| 暂停， flase | 正在播放）         currentTime    获取当前播放时间（单位是秒）  将秒转化为 时，分 ，秒             400秒 ===》   400 / 60 / 60                          400 / 60 % 60                          400 % 60         duration    获取当前多媒体的总时长（单位是秒）    ☞ 事件：         timeupdate    检测到当前视频正在播放    ☞ 跳播功能： 本质就是在设置当前播放时间         公式：         点击位置的宽度 ： 整个进度条的宽度 = 当前播放时间： 总时长         当前播放时间 =  点击位置的宽度 *  总时长 / 整个进度条的宽度         注意：            当前鼠标点击的位置 就是进度条的宽度</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2019/08/16/%E5%87%BD%E6%95%B0%E5%8F%8A%E5%91%A8%E8%BE%B9%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    <url>2019/08/16/%E5%87%BD%E6%95%B0%E5%8F%8A%E5%91%A8%E8%BE%B9%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="函数及周边的问题总结"><a href="#函数及周边的问题总结" class="headerlink" title="函数及周边的问题总结"></a>函数及周边的问题总结</h2><h3 id="1-函数的作用"><a href="#1-函数的作用" class="headerlink" title="1.函数的作用"></a>1.函数的作用</h3><ul><li>函数的封装，就是将一段功能性的代码，放到函数里方便后期使用，当使用的时候，直接调用函数就行了；</li><li>基于js封装的库，以及插件中，都是以函数进行的封装</li><li>函数几乎能够在咱们整个后期课程中出现</li></ul><h3 id="2-创建函数的方式"><a href="#2-创建函数的方式" class="headerlink" title="2.创建函数的方式"></a>2.创建函数的方式</h3><ul><li><p>函数声明</p><p>function fn () {};</p></li><li><p>函数表达式</p><p>var fn = function (){};</p></li><li><p>匿名函数</p><p>(function(){})();</p><p>注意：==这个函数只能执行一次==</p></li></ul><h3 id="3-函数参数相关的问题"><a href="#3-函数参数相关的问题" class="headerlink" title="3.函数参数相关的问题"></a>3.函数参数相关的问题</h3><ul><li>形参<ul><li>函数括号里面的变量，用来接收实参传递过来的实际参数</li><li>function fn ( 形参 ) { };</li><li>注意：<ul><li>当形参个数多于实参个数，会报出undefined</li><li>使用形参和实参的时候，需要保持个数一致！！</li></ul></li></ul></li><li>实参<ul><li>给形参传递具体的参数，可以传递数组，字符串…</li></ul></li></ul><pre><code class="js">function fn (x,y,z){    console.log(x,y,z);}fn(10,20);        // 10,20，undefined</code></pre><h3 id="4-函数的返回值以及函数的状态"><a href="#4-函数的返回值以及函数的状态" class="headerlink" title="4.函数的返回值以及函数的状态"></a>4.函数的返回值以及函数的状态</h3><ul><li>函数可以分为：<ul><li>有返回值的函数</li><li>无返回值的函数</li></ul></li><li>如果在函数中声明了变量，保存了值，如果不加return的话，会报处undefined</li><li>如果使用了return，但是后面没有一个明确的返回值，那么也是undefined</li><li>如果使用了return，后续的代码将不再继续执行</li><li>==补充问题==：<ul><li>return后面还可以再去声明一个函数</li></ul></li><li>函数的4种状态（了解）<ul><li>有参数无返回值的函数</li><li>有返回值无参数的函数</li><li>无返回值无参数的函数</li><li>有参数有返回值的函数</li></ul></li></ul><pre><code class="js">function fn (x,y){    var num = x + y;}var f = fn(10,20);console.log(f);        //    undefined</code></pre><h3 id="5-作用域以及作用域链"><a href="#5-作用域以及作用域链" class="headerlink" title="5. 作用域以及作用域链"></a>5. 作用域以及作用域链</h3><ul><li><p>全局作用域</p><ul><li>在函数外部的区域就是全局作用域</li><li>在全局下定义了一个变量或者是声明了一个函数，就在全局最大的对象window上添加了一个属性</li></ul></li><li><p>局部作用域</p><ul><li>在函数内部的区域就属于局部作用域</li></ul></li><li><p>作用域链：</p><ul><li>基本定义：函数内部使用一个声明并且赋值的变量，如果当前作用域内有，那么就执行，否则会沿着当前的作用域依次向上查找，这个查找的过程形成了一个链式结构，我们称之为作用域链</li><li>注意：如果在全局下都没有你要使用的变量，那么直接报错</li></ul></li><li><p>补充问题：</p><ul><li>请问，函数的形参是属于全局的还是局部的？</li><li>函数的形参，是属于当前函数局部作用域下的变量，外部是无法访问到的</li></ul></li></ul><pre><code class="js">function fn(){      var num = 10;    console.log(num);    //     10}fn();console.log(num);    // undefined</code></pre><h3 id="6-js的预解析机制"><a href="#6-js的预解析机制" class="headerlink" title="6.js的预解析机制"></a>6.js的预解析机制</h3><ul><li>预解析是什么：一个js引擎去解析的时候，他会把函数声明和变量进行提升，==函数声明提升到最前面，高于变量==</li><li>预解析总结：<ul><li>在声明函数的时候，一定要注意不要使用同一个函数名字，否则后一个函数会把前面的函数干掉重新赋值</li><li>在使用变量的时候，因为预解析会把变量进行提升，但是，赋值并不会提升</li><li>预解析就是一个需要注意的“大坑”，后期开发过程中，学会主动的去规避这个问题就好了</li></ul></li></ul><pre><code class="js">fn();function fn(){    console.log(1);}fn();var fn = 20;function fn(){    console.log(2);}fn();// 结果：2,2,**fn is not a function**/* 分析：1.两个函数名字一样，后面的函数把前面的函数重新赋值了，最后调用函数的结果就是两次2        2.var fn = 20；已经把fn函数，给重新复制成了一个number类型，最后调用函数就会报出fn is not a function，同时，后续代码将不再解析执行*/</code></pre><h3 id="7-函数的this指向"><a href="#7-函数的this指向" class="headerlink" title="7.函数的this指向"></a>7.函数的this指向</h3><ul><li>this因为指向不确定，只有在最后调用了才能确定this的最终指向</li><li>==this出现的几个主要场景：==<ul><li>在全局下声明的函数，this指向的就是全局最大的对象window</li><li>在对象的方法中的this指向的就是最后的调用者</li><li>在BOM中的定时器，this指向的也是全局对象window</li><li>在DOM中的事件处理函数中，this指向的是当前的事件源</li><li>在ES6的箭头函数中，由于箭头函数没有自己的this，它的this来自于外部对象的this</li></ul></li></ul><pre><code class="js">function fn(){    console.log(this);}fn();        // 指向window</code></pre><h3 id="8-函数的arguments对象的基本定义以及使用场景"><a href="#8-函数的arguments对象的基本定义以及使用场景" class="headerlink" title="8.函数的arguments对象的基本定义以及使用场景"></a>8.函数的arguments对象的基本定义以及使用场景</h3><ul><li>基本的定义：<ul><li>arguments本身也是一个对象，是一个比较特殊的对象</li><li>也称之为伪数组，因为没有真正数组上的方法</li><li>但是它有属于自己的方法，详细可以去MDN文档了解</li></ul></li><li>作用：<ul><li>就是在函数传入实参的时候，用于接收实参传递进来的值</li></ul></li><li>补充：<ul><li>在ES6的箭头函数中，并没有这个特殊的对象</li></ul></li></ul><h3 id="9-创建对象的3种方式"><a href="#9-创建对象的3种方式" class="headerlink" title="9.创建对象的3种方式"></a>9.创建对象的3种方式</h3><ul><li>字面量方式创建对象</li></ul><pre><code class="js">var obj = {    name:&#39;jack&#39;,    age:18.    sayHi:function(){        console.log(&#39;你好，我是一个方法&#39;);    }}obj.sayHi();</code></pre><ul><li>工厂模式创建对象</li></ul><pre><code class="js">function person(name,age){    var o = new Object();    o.name = name;    o.age = age;    o.sayHi = function(){        console.log(&#39;你好，我是一个方法&#39;);    }    return o;}var obj = person(&#39;jack&#39;,18);obj.sayHi();console.log(obj.name);</code></pre><ul><li>自定义构造函数创建对象</li></ul><pre><code class="js">function Person(name,age){    this.name = name;    this.age = age;    this.sayHi = function (){         console.log(&#39;你好，我是一个方法&#39;);    }}var obj = new Person(&#39;jack&#39;,18);obj.sayHi();console.log(obj.name);</code></pre><ul><li>现在掌握创建对象的基本方式就好</li></ul><h3 id="10-new干了几件事"><a href="#10-new干了几件事" class="headerlink" title="10.new干了几件事"></a>10.new干了几件事</h3><ul><li>四件事<ul><li>创建了一个新的空对象</li><li>并且把this指向了新的空对象</li><li>把属性和方法给到这个新的空对象上</li><li>返回这个新的对象</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2019/08/15/%E7%A7%BB%E5%8A%A8web%E7%9F%A5%E8%AF%86%E9%87%8D%E7%82%B9/"/>
    <url>2019/08/15/%E7%A7%BB%E5%8A%A8web%E7%9F%A5%E8%AF%86%E9%87%8D%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<p>##渐变</p><h3 id="1-线性渐变"><a href="#1-线性渐变" class="headerlink" title="1.线性渐变"></a>1.线性渐变</h3><pre><code class="css">background-image: linear-gradient()backgroound:linear-gradient()/*   渐变的方向：to 和方位名称或者用角度来表示  to right  to left   to top  to bottom*//* 注意点:用角度表示方位时，0度表示从下向上，90度表示从左向右 *//* 语法：*/background-image：linear-gradient(  to right,  red,  blue)</code></pre><h3 id="2-径向渐变"><a href="#2-径向渐变" class="headerlink" title="2.径向渐变"></a>2.径向渐变</h3><pre><code class="css">   /*background-image:radial-gradient()   确定渐变的原点位置   关键字 at   例如： at 方位名称 at center  at right top          at  值    at 100px 100px          */   /*语法：*/      background-iamge:radial-gradient(         200px 100px at center,         &lt;!-- 开始颜色 --&gt;         red,         &lt;!-- 结束颜色 --&gt;         blue      )</code></pre><p>##2d转化（transform复合属性）</p><h3 id="1-位移translate改变元素位置"><a href="#1-位移translate改变元素位置" class="headerlink" title="1.位移translate改变元素位置"></a>1.位移translate改变元素位置</h3><p> 语法：transform:translate(水平位置，垂直位置)<br>  示例：定位盒子实现居中显示（2d）</p><pre><code class="html">  &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;    *{        margin: 0;        padding: 0;    }    .father{        width: 300px;        height: 300px;        background-color: red;        position: relative;    }    .son{        width: 100px;        height: 100px;        background-color: pink;        position: absolute;        left: 50%;        top:50%;        transform: translate(-50%,-50%);    }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;father&quot;&gt;        &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="2-旋转rotate"><a href="#2-旋转rotate" class="headerlink" title="2.旋转rotate"></a>2.旋转rotate</h3><pre><code>语法：transform：rotate（度数）改变轴心点的位置transform-origin: 水平值 垂直值</code></pre><h3 id="3-scale缩放"><a href="#3-scale缩放" class="headerlink" title="3.scale缩放"></a>3.scale缩放</h3><pre><code>语法：transform：scale(0,0)注意：设置值时不能带单位，值代表的是倍数      第一个值示宽度的倍数，第二个值表示高度的倍数      放大值大于1 缩小值小于1</code></pre><h3 id="4-倾斜skew"><a href="#4-倾斜skew" class="headerlink" title="4.倾斜skew"></a>4.倾斜skew</h3><pre><code>语法：transformL:skew(水平倾斜度，垂直倾斜度)注意：只设置一个值表示沿水平方向倾斜</code></pre><p>##3d转化（transform复合属性）<br>  3d的坐标轴有三个轴：<br>      X轴（水平）从左向右为正方向<br>      Y轴（垂直）从上向下为正方向<br>      Z轴 从里向外为正方向</p><h3 id="1-位移translate"><a href="#1-位移translate" class="headerlink" title="1.位移translate"></a>1.位移translate</h3><pre><code> 语法：transform: translateX() translateY() translateZ()   示例：定位盒子实现居中显示（3d）</code></pre><pre><code class="html">    &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;    *{        margin: 0;        padding: 0;    }    .father{        width: 300px;        height: 300px;        background-color: red;        position: relative;    }    .son{        width: 100px;        height: 100px;        background-color: pink;        position: absolute;        left: 50%;        top:50%;        transform:translateX(-50%) translateY(-50%);    }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;father&quot;&gt;        &lt;div class=&quot;son&quot;&gt;&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>   注意：在网页中如果想实现近大远小的效果需要添加透视<br>         perspective 值建议取值600px-1000px,需要加在<br>         设置了transf属性的父元素身上</p><h3 id="2-旋转rotate（）"><a href="#2-旋转rotate（）" class="headerlink" title="2.旋转rotate（）"></a>2.旋转rotate（）</h3><pre><code> 语法：transform：rotateX() rotateY() rotateZ()</code></pre><h3 id="3-缩放scale（）"><a href="#3-缩放scale（）" class="headerlink" title="3.缩放scale（）"></a>3.缩放scale（）</h3><pre><code>语法：transform：scaleX（） scaleY() scaleZ()</code></pre><h3 id="4-倾斜skew（）"><a href="#4-倾斜skew（）" class="headerlink" title="4.倾斜skew（）"></a>4.倾斜skew（）</h3><pre><code> 语法：transform：skewX（）</code></pre><p> ##动画anmiation</p><h3 id="1-定义动画序列"><a href="#1-定义动画序列" class="headerlink" title="1.定义动画序列"></a>1.定义动画序列</h3><pre><code>  关键字@keyframes 动画名{      from{          设置动画开始说状态的代码      }      to{          设置动画结束的代码      }  }</code></pre><h3 id="2-动画的相关属性："><a href="#2-动画的相关属性：" class="headerlink" title="2.动画的相关属性："></a>2.动画的相关属性：</h3><pre><code> 2.1动画名：animation-name: 2.2动画执行时间：animation-duration: 2.3动画执行次数：animation-iteration-count: 默认值为1 infinite表示无限次 2.4动画逆播：animation-direction:alternate 2.5动画速度类型：animation-timing-function:linear 2.6动画结束时候的状态animation-fill-mode:forwards; 2.7动画延时animation-delay:1s 2.8动画播放animation-play-state:paused</code></pre><h3 id="动画相关属性分写示例"><a href="#动画相关属性分写示例" class="headerlink" title="动画相关属性分写示例"></a>动画相关属性分写示例</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;    *{        margin: 0;        padding: 0;    }    .box{        width: 200px;        height: 200px;        background-color: pink;        /* 动画名 */        animation-name: move;        /* 动画逆播 */        animation-direction:alternate;        /* 动画执行次数 */        animation-iteration-count: infinite;        /* 动画执行时间 */        animation-duration: 2s;        /* 动画延时 */        animation-delay: 1s;        /* 动画执行的状态 */        animation-timing-function: linear;    }    .box:hover{        animation-play-state: paused;    }    @keyframes move{        form{            transform: translateX(0px);        }        to{            transform: translateX(500px)        }    }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="动画合写示例"><a href="#动画合写示例" class="headerlink" title="动画合写示例"></a>动画合写示例</h3><pre><code class="html"> &lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        .box {            width: 200px;            height: 200px;            background-color: red;            position: relative;            /* 合写 */            animation: alternate  1s infinite  linear  1s  change;        }        @keyframes change {            from {                left: 0;            }            to {              left: 500px;            }        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><h3 id="动画多状态写法示例"><a href="#动画多状态写法示例" class="headerlink" title="动画多状态写法示例"></a>动画多状态写法示例</h3><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style type=&quot;text/css&quot;&gt;        * {            margin: 0;            padding: 0;        }        .box {            width: 200px;            height: 200px;            background-color:red;            margin: 150px auto;            animation: change1 10s linear;        }        @keyframes change1 {            0% {                width: 200px;            }            50% {                width: 400px;                height: 200px;            }            100% {                width: 400px;                height: 400px;            }            80% {                width: 400px;                height: 400px;                background-color: red;            }            100% {                width: 400px;                height: 400px;                background-color: blue;            }        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;     &lt;div class=&quot;box&quot;&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>##视口viewport</p><pre><code class="html">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=no&quot;&gt;</code></pre><h3 id="1-视口相关属性"><a href="#1-视口相关属性" class="headerlink" title="1.视口相关属性"></a>1.视口相关属性</h3><p>  width=device-width：表示的是设置宽度与当前设备一样宽<br>  initial-scale:禁止页面出现缩放效果<br>  user-scalable=no：禁止用户手动缩放</p><p>##伸缩布局(弹性布局)<br>  设置伸缩布局的步骤<br>  先给父元素设置伸缩盒子：display:flex;<br>  伸缩盒子相关属性：</p><h3 id="1-设置主轴方向"><a href="#1-设置主轴方向" class="headerlink" title="1.设置主轴方向"></a>1.设置主轴方向</h3><pre><code>flex-direction:row(水平显示) column(垂直)</code></pre><h3 id="2-设置主轴对齐方式："><a href="#2-设置主轴对齐方式：" class="headerlink" title="2.设置主轴对齐方式："></a>2.设置主轴对齐方式：</h3><pre><code>justif-content：flex-start flex-end(结束位置) center(居中) space-around(环绕)space-between(两边对齐中间环绕 )</code></pre><h3 id="3-设置侧轴对齐方式："><a href="#3-设置侧轴对齐方式：" class="headerlink" title="3.设置侧轴对齐方式："></a>3.设置侧轴对齐方式：</h3><pre><code>align-items：syuatch(拉伸) flex-start(结束位置)center(居中)</code></pre><h3 id="4-元素换行显示"><a href="#4-元素换行显示" class="headerlink" title="4.元素换行显示"></a>4.元素换行显示</h3><pre><code>flex-wrap:wrap(换行) nowrap（不换行）</code></pre><h3 id="5-设置子元素独立对齐方式"><a href="#5-设置子元素独立对齐方式" class="headerlink" title="5.设置子元素独立对齐方式"></a>5.设置子元素独立对齐方式</h3><pre><code>align-self:auto flex-start flex-end center baseline stretch伸缩布局示例</code></pre><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;style&gt;        .box {            width: 500px;            height: 600px;            border: 1px solid red;            margin: 100px auto;            /* 设置为伸缩盒子 */            display: flex;            /* 设置主轴方向 */            flex-direction: row;            /* 设置主轴方向的对齐方式 */            justify-content: flex-start;            /* 设置侧轴对齐方式 */            align-items: stretch;            /* 设置元素是否换行显示 */            flex-wrap: wrap;             /* 换行后的对齐方式 */            align-content: stretch;        }        .one {            width: 100px;            height: 100px;            background-color: blue;            margin: 1px;        }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;box&quot;&gt;        &lt;div class=&quot;one&quot;&gt;1&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;2&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;        &lt;div class=&quot;one&quot;&gt;3&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>##rem适配<br>rem：相对单位，相对网页根标签（html）的文字大小<br>em：相对单位相对当前的标签文字大小</p><p>##媒体查询<br>媒体查询的步骤：</p><h3 id="1-通过媒体查询方式（将设备分为若干份以20分为例，然后设置html的文字大小）"><a href="#1-通过媒体查询方式（将设备分为若干份以20分为例，然后设置html的文字大小）" class="headerlink" title="1.通过媒体查询方式（将设备分为若干份以20分为例，然后设置html的文字大小）"></a>1.通过媒体查询方式（将设备分为若干份以20分为例，然后设置html的文字大小）</h3><p>媒体查询语法：<br>@media only screen and(设备宽){</p><pre><code>html{    font-size:设备宽/份数}</code></pre><p>}<br>媒体查询示例</p><pre><code class="less">@f:20;// 适配320@media only screen and(width:320px){    html{        font-size: 320px/@f;    }}//适配360@media only screen and(width:360px){    html{        font-size: 360px/@f;    }}//适配375@media only screen and(width:375px){    html{        font-size: 375px/@f;    }}//适配414@media only screen and(width:414px){    html{        font-size: 414px/@f;    }}//适配768@media only screen and(width:768px){    html{        font-size: 768px/@f;    }}//适配1024@media only screen and(width:1024px){    html{        font-size: 1024px/@f;    }}</code></pre><p>##bootstrap Ui框架</p><p>###1.使用bootstrap步骤<br>必须引用bootstrap.css 的文件</p><p>###2.兼容ie版本</p><pre><code class="html">&lt;!-- [IF lt IE 9] --&gt;    &lt;!-- html5shiv.js 解决标签不兼容 --&gt;    &lt;!-- respond.js  解决 @media 不兼容 --&gt;&lt;!-- [end] --&gt;</code></pre><p>###3.栅格布局<br>作用：实现响应式布局<br>栅格参数：<br>超小屏&lt;768px      .col-xs-值 适配手机端<br>小屏&gt;=768px       .col-sm-值 适配平板<br>中等屏&gt;=992px     .col-md-值 适配桌面<br>超大屏&gt;1200px     .col-lg-值 适配超大屏</p><p>在栅格布局下会将设备默认分为12等份</p><p>###1.使用栅格布局必须给父元素设置类名container 或者 container-fluid<br>栅格布局示例：</p><pre><code class="html">&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt;    &lt;meta charset=&quot;UTF-8&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;ie=edge&quot;&gt;    &lt;title&gt;Document&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;bootstrap/css/bootstrap.css&quot;&gt;    &lt;style&gt;    .box{        height: 500px;        background-color: red;    }    .item{        height: 50px;        border: 1px solid #ccc;    }    &lt;/style&gt;&lt;/head&gt;&lt;body&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;item col-md-4 col-sm-6 col-xs-12&quot;&gt;1&lt;/div&gt;        &lt;div class=&quot;item col-md-4 col-sm-6 col-xs-12&quot;&gt;2&lt;/div&gt;        &lt;div class=&quot;item col-md-4 col-sm-12 col-xs-12&quot;&gt;3&lt;/div&gt;    &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;</code></pre><p>#</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="undefined2019/08/15/JavaScript%E5%9F%BA%E7%A1%80/"/>
    <url>2019/08/15/JavaScript%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="JavaScript基础"><a href="#JavaScript基础" class="headerlink" title="JavaScript基础"></a>JavaScript基础</h1><h2 id="JS概念"><a href="#JS概念" class="headerlink" title="JS概念"></a>JS概念</h2><pre><code>基于对象和时间驱动，运行在浏览器客户端的脚本语言1.js的运行环境：在浏览器端（内置了js引擎）2.对象：在js中任何一个具体的事物    对象有三要素：继承 封装 多态3.事件驱动：在网页中用户的任何一个动作都会对应一个事件</code></pre><h2 id="JS组成"><a href="#JS组成" class="headerlink" title="JS组成"></a>JS组成</h2><pre><code>1.ECMASCRIPT（基础语法）2.DOM（通过JS的方式控制页面的标签）3.BOM（通过JS的方式控制浏览器中的效果）</code></pre><h2 id="JS的位置"><a href="#JS的位置" class="headerlink" title="JS的位置"></a>JS的位置</h2><pre><code>一、外联式1.新建JS文件 2.引入JS通过&lt;script src=&quot;js的路径&quot;&gt; &lt;/script&gt;注意：引入js的标签里面不能再写内容二、内嵌式&lt;script&gt;&lt;/script&gt;可以放在&lt;head&gt;区域，也可以放在&lt;body&gt;区域，建议放在&lt;body&gt;区域三、行内式(不建议)写在页面标签的内部比如：&lt;p onclick=&quot;javascript:alert(&#39;ss&#39;)&quot;&gt;点击&lt;/p&gt;</code></pre><h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><pre><code>变量：变量就是一个用来存储临时数据的一个容器1.先声明后赋值声明一个变量var 自定义变量名;给变量赋值自定义变量名 = 值;2.声明同时赋值var 自定义变量名 = 值;3.可以同时声明多个变量var num1,num2,num3;中间以逗号隔开4.可以同时声明多个变量并赋值var num1=1,num2=1,num3=1;中间以逗号隔开注意事项 :1 一个变量一次只能保存一个值         2 变量中保存的值是最后一次的赋值结果         3 赋值运算符先执行右边的代码，把右面的赋值给左边</code></pre><h2 id="JS输出的几种方式"><a href="#JS输出的几种方式" class="headerlink" title="JS输出的几种方式"></a>JS输出的几种方式</h2><pre><code>1.以弹出框的形式alert(&#39;&#39;);2.以控制台的形式consle.log(&#39;&#39;);3.在页面上显示document.write(&#39;&#39;);4.让用户进行输入的prompt(&#39;&#39;);5.进行判断的,让用户选择是确定还是取消confirm(&#39;&#39;);注意事项 1 括号里可以是双引号也可以是单引号，但必须是成对出现        2 加引号输出的是引号内的内容，不加引号输出的是变量的内容（如果不给变量赋值，就会出错）        3 在js中严格区分大小写</code></pre><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><pre><code>一、简单数据类型  1.数字类型(number)  特点：变量的值是数字（正数 负数 小数 整数），那么变量的数据类型是数字类型  注意：如果数字类型的变量相加，那么最后的结果就是通过数学运算后的计算结果  var a = 2;数字类型  2.字符串类型(string)  特点：变量的值使用了单引号和双引号，则变量类型是字符串类型  注意：如果是字符串相加，则结果只会是简单的拼接到一起  var a = &#39;2&#39;;字符串类型  3.布尔类型(boolean)  特点：变量的值是true或者是false  注意：true： 代表正确的（条件满足的）         false：代表错误的（条件不满足）  4.undefined  特点：1.如果一个变量没赋值，则变量的默认值是undefined         2.如果变量的值是undefined，则该变量的数据类型是undefined类型  5.获取变量的数据类型：typeof(变量)</code></pre><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><pre><code>一、转换为数字类型1.Number(变量);转化比较严格，在进行转化时，遇到非数字的值，会转化为NaA例如：1.1sssddd转化后为NaN，因为不是一个数字2.parseInt(变量);转化数字类型后，只保留整数部分，小数部分直接省略3.parseFloat(变量);转化数字类型后，会保留小数部分，遇到非数字的值会保留小数部位1.1sssddd转化后为1.1二、转换为字符串类型1.String(变量);可以将任何的数据类型转换为字符串类型2.变量.toString();无法将undefined转换为字符串类型三、转换为布尔类型Boolean(变量);在内存中，布尔类型的结果就是1和00 NaN undefined 空字符串 转换为 布尔类型后就是false</code></pre><h2 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h2><pre><code>1.\\&#39;   \&quot;可以表示引号2.\n   换行\r   回车</code></pre><h2 id="数字类型中的取值范围"><a href="#数字类型中的取值范围" class="headerlink" title="数字类型中的取值范围"></a>数字类型中的取值范围</h2><pre><code>最大值：±1.7976931348623157乘以10的308次方     Number.MAX_VALUE最小值：±5 乘以10的-324次方                      Number.MIN_VALUE</code></pre><h2 id="isNaN（判断是不是数字）"><a href="#isNaN（判断是不是数字）" class="headerlink" title="isNaN（判断是不是数字）"></a>isNaN（判断是不是数字）</h2><pre><code>判断一个变量的值是不是不是一个数字var n = &#39;123&#39;;var nn = isNaN(n);console.log(&#39;nn&#39;);输出true则不是数字；输出flase则是数字；总结：isNaA判断是不是不是数字，返回值是true则不是数字，返回值是flase则是数字。</code></pre><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><pre><code>算数运算符：+ - * / % ()1  +运算：如果是数字类型的相加，得到的结果就是数字类型         如果+两边有一个是字符串或者都是字符串，得到的结果就是字符串，两个值进行拼接2  -运算：如果是数字类型的相加，得到的结果就是数字类型         如果是数字类型的字符串相减，得到的结果还是数字类型（进行了隐式类型转换）         如果是非数字的字符串相减，得到的是NaN3  *运算和-运算相似4  /运算：如果是数字类型的相除，得到的结果就是数字类型         如果是数字类型的字符串相除，得到的结果还是数字类型（进行了隐式类型转换）         如果是非数字的字符串相除，得到的是NaN         如果除数是0，得到的结果是Infinity5  %用来取余6  ()有小括号先计算小括号里的赋值运算符：=   +=   -=   *=   /=   %=a+=b     &gt;&gt;&gt;&gt;&gt;    a=a+ba-=b     &gt;&gt;&gt;&gt;&gt;    a=a-b************************************************************************************************一元运算符：++ --a++++a总结：1. a++和++a在不参与赋值的时候，都会自身加1；     2. 当a++和++a在参与赋值的时候，a++会将自身的值先去进行赋值运算，然后在自身加1（先赋值，后加1）     ++a会先自身加1，然后在进行赋值（先加1，后赋值）************************************************************************************************比较运算符：&gt;   &lt;   &gt;=   &lt;=   ==   ===    !=    !====:比较的只是值，只判断值相不相等===：比较的是值和数据类型，判断的是值和数据类型相不相等!=：判断值是不是不等，不考虑数据类型!==:判断值和数据类型总结：通过比较运算符得到的结果只有两个true（正确的）和flase（错误的）************************************************************************************************逻辑运算符：||    &amp;&amp;   ！||（或）满足一个条件即可&amp;&amp;（且）满足所有条件才可！（非）取反</code></pre><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><pre><code>单条件表达式************************************************************************************************if(条件表达式){     逻辑代码}else{      逻辑代码}多条件表达式if(条件表达式){     逻辑代码}else if{      逻辑代码}else if{      逻辑代码}else {      逻辑代码}三元表达式表达式? 逻辑代码1:逻辑代码2;************************************************************************************************switch语句1.语法switch(变量){  case 值1：  逻辑代码;  break;  case 值2：  逻辑代码;  break;  case 值3：  逻辑代码;  break;  default:  逻辑代码;  break;}2.使用场景：如果程序中的变量是一个具体值，不是用来表示一个范围，name可以使用3.注意：    switch后面变量的值和数据类型，要和case后面的值和数据类型相同    break关键字不能省略</code></pre><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><pre><code>while循环1.语法    先变量初始化         while(条件表达式){           循环体代码;         }2.执行过程:先进行变量初始化        将变量中的值带入条件表达式，进行判断        判断结果为true，则执行循环体代码，判断结果为false，则不执行循环体代码注意:条件满足就执行，不满足就不执行。************************************************************************************************do while循环1.语法    先变量初始化         do{              循环体代码;         }         while(条件表达式)2.执行过程:先进行变量初始化        然后执行do里面的循环体代码        然后在执行条件表达式，进行判断，结果为true继续执行循环体代码，结果为flase则不执行循环体代码注意：当条件不满足时，do while循环比while循环多执行一次；     当调价满足时，while和do while循环执行次数相同；************************************************************************************************for 循环1.语法for(变量初始化;条件表达式;自增或自减){    循环代码;}例如：for(var i=1;i&lt;10;i++){          console.log(i);    }2.执行过程：先进行变量初始化            然后将变量初始化的值带入条件表达式中，进行判断，如果为flase则不执行循环代码，如果为true则执行循环代码，然后在进行自增或自减，在将值带入条件表达式中；如果为true则继续执行；如果为false则不执行</code></pre><h2 id="continue和break"><a href="#continue和break" class="headerlink" title="continue和break"></a>continue和break</h2><pre><code>区别：continue:跳出当前循环，进入到下一个i++循环中；例如：for(var i=1;i&lt;=5;i++){            if(i==3){                continue;            }            console.log(i);        }输出结果为：1  2  4  5break:跳出整个循环，后面的循环不在执行；例如：for(var i=1;i&lt;=5;i++){            if(i==3){                break;            }            console.log(i);        }输出结果为：1  2</code></pre><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><pre><code>1. 数组：存储多个数据的容器变量只能存储一个数据************************************************************************************************2.  √使用：定义一个数组var 数组名称 = [];     √给数组赋值：两种方式     1在定义数组的时候赋值   例如：var ary = [1,2,&#39;ss&#39;,&#39;我们&#39;];     2通过索引的方式给数组赋值     索引：相当于编号，在数组里的索引从0开始     数组名[索引值]=值;          例如：ary[0]=1;     √从数组中取值     数组名[索引值];************************************************************************************************3. 冒泡排序：var arr = [1,2,3,4,5]      将顺序从大到小排列for(var i=0;i&lt;arr.length-1;i++){  for(var j=0;j&lt;arr.length-1-i;j++){    if(arr[i]&lt;arr[i+1])    var temp = arr[i];    arr[i]=arr[i+1];    arr[i+1]=temp;  } }console.log(arr);</code></pre><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><pre><code>************************************************************************************************通过js获取当前系统时间var 日期变量名 = new Date();getFullYear();获取年getMonth();获取月             0 代表1 月    要加个1getDate(); 获取日期getHours(); 获取小时getMinutes(); 获取分钟getSeconds(); 获取秒************************************************************************************************分割字符串:split(&#39;&#39;)  ---&gt; 通过该方法返回的是一个数组************************************************************************************************数学方法:     1. Math.floor();   地板函数 : 用来返回一个小于当前数字且与当前数字最接近的一个整数。     2. Math.ceil();    天花板函数： 用来返回一个大于当前数字且与当前数字最接近的一个整数。     3. Math.random();  随机数：随机产生的一个数字  [0,1)总结：获取任何值之间的随机整数公式：Math.floor(Math.random()*(max-min+1)+min);************************************************************************************************</code></pre><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><pre><code class="{">1.函数的定义:函数是把重复的代码进行封装；function 自定义函数名(){  函数体;}自定义函数名注意事项：1尽量使用动词加名词的方式进行                   2尽量使用小驼峰命名法，第一个单词字母小写，第二个单词字母大写************************************************************************************************2.调用函数函数名();注意：函数可以多次调用************************************************************************************************3.参数函数的参数写在函数名的小括号里，写在函数名小括号里面的叫做形参，写在调用的括号里叫做实参function 自定义函数名(形参1,形参2,..){  函数体;}函数名(实参1，实参2,...);注意：参数的名字也是自定义；实参与形参是一一对应的关系；实参是把值传给形参；参数的数量是不固定的************************************************************************************************4.返回值    将函数内部的值传给函数外部使用注意：1.在函数内部定义的变量在函数外部不能使用2.函数的返回值需要外部定义一个变量去接收3.函数可以有返回值也可以没有4.return后的值是什么，在函数外面得到的就是什么5.数组可以作为返回值6.函数也可以作为返回值7.return后面什么都没有，则返回的值是undefined8.函数还可以作为参数</code></pre><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><pre><code>1.定义：代码能够作用的区域2.作用域    分为全局作用域和局部作用域全局作用域：在函数外部形成的区域就是全局作用域，在全局作用域定义的变量就是全局变量全局变量可以在任何地方使用局部作用域：在函数内部形成的区域就是局部作用域，在局部作用域定义的变量就是局部变量局部变量只能在局部作用域使用</code></pre><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><pre><code>1.定义：将多个作用域链接到一块形成的一个链状区域 （是虚假的）如果在当前作用域中没有找到值，就会按照作用域形成的链条一条一级的往上找</code></pre><h2 id="域解析"><a href="#域解析" class="headerlink" title="域解析"></a>域解析</h2><pre><code>域解析就是在执行代码的过程中分为两个过程，域解析过程和代码执行过程预解析过程：1. 把变量的声明提升到当前作用域的最前面，只会提升声明，不会提升赋值。2. 把函数的声明提升到当前作用域的最前面，只会提升声明，不会提升调用。3. 先提升var，在提升function</code></pre><h2 id="函数的其他知识"><a href="#函数的其他知识" class="headerlink" title="函数的其他知识"></a>函数的其他知识</h2><pre><code>1.匿名函数和命名函数有名字叫命名函数，没名字叫匿名函数匿名函数：function(){}命名函数：function 自定义函数名(){}************************************************************************************************2.自调用函数：函数自己调用自己(function (){})();注意：后面加&#39;;&#39;(function 自定义函数名(形参){})(实参);</code></pre><h2 id="arguments对象介绍"><a href="#arguments对象介绍" class="headerlink" title="arguments对象介绍"></a>arguments对象介绍</h2><pre><code>1.使用arguments可以获取参数的值2.使用arguments.length可以获取参数的个数3.使用arguments遍历可以获取参数的值例如： for(var i = 0; i &lt; arguments.length; i++) {               console.log(arguments[i]);       }   // 总结：        1. 如果函数中的形参个数能够确定，那么还是通过给函数设置形参用来接收用户的值        2. 如果函数无法确定形参的个数，那么可以在函数中通过arguments的方式获取</code></pre><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><pre><code>一：定义对象就是一个抽象事物的具体描述（什么样子，功能）,就是一个容器学习对象就是学习如何将数据保存到对象中和如何从对象中取值************************************************************************************************二：创建对象对象的创建方式有4种1.通过字面量的方式：中间以分号隔开，最后是逗号var obj = {  键 : 值,  键 : 值}例如：var obj = {      name: &#39;zs&#39;,      age: 18,      sex: true,      sayHi: function () {        console.log(&#39;哈哈&#39;);      }  };  2.通过构造函数的方式创建对象var obj = new Object();obj.username = &#39;张三&#39;;obj.age = 18;3.通过工厂方式创建对象function getObj(uname,age){  var obj = new Object();  obj.username = uname;  obj.age = age  return obj;}var zs = getObj(&#39;张三&#39;,18);var ls = getObj(&#39;李四&#39;,20);4.通过自定义构造函数创建对象     函数名遵守大驼峰命名法，每个单词首字母大写function People(uname,age){  this.usename = uname;  this.age = age;}var zs = new People(&#39;张三&#39;,18); 注意：1. 通过构造函数创建对象就必须使用 new 关键字 ************************************************************************************************三：给对象赋值可以在定义的时候赋值还可以对象名.属性=值；两种方式注意：    对象中的值都是以键/值对的形式保存的    对象中的函数称为方法    对象中用来描述对象基本特征的称为属性************************************************************************************************四：从对象中取值1.直接使用对象名.属性的方式例如：  obj.uname;     obj.sing();2.通过对象[&#39;键的名字&#39;]例如：  obj.[&#39;uname&#39;];    如果是变量就要用这种方式************************************************************************************************五：对象的遍历1.语法：for(存储键名的变量 in 对象名){    console.log(存储键名的变量);}</code></pre><h2 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h2><pre><code>1. instanceof: 判断当前的变量(对象)是不是通过指定的构造函数创建的   typeof:获取变量(对象)的数据类型2. this关键字谁调用构造函数，this就指向谁</code></pre><h2 id="内存的存储方式"><a href="#内存的存储方式" class="headerlink" title="内存的存储方式"></a>内存的存储方式</h2><pre><code>1.简单数据类型的存储方式存储在栈区,赋值过程中，直接拷贝一份给赋值给另外一个变量2.复杂对象类型的存储方式（对象）存储在堆区，会产生一个内存地址赋值给变量</code></pre><h2 id="内置对象"><a href="#内置对象" class="headerlink" title="内置对象"></a>内置对象</h2><pre><code>内置对象(方法)可以在网上进行查MDN学习</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>